// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// running_quantile_cpp
DataFrame running_quantile_cpp(NumericVector data, NumericVector adjusted_day_of_year, NumericVector q, double min_fraction);
RcppExport SEXP _rIACI_running_quantile_cpp(SEXP dataSEXP, SEXP adjusted_day_of_yearSEXP, SEXP qSEXP, SEXP min_fractionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type adjusted_day_of_year(adjusted_day_of_yearSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type min_fraction(min_fractionSEXP);
    rcpp_result_gen = Rcpp::wrap(running_quantile_cpp(data, adjusted_day_of_year, q, min_fraction));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rIACI_running_quantile_cpp", (DL_FUNC) &_rIACI_running_quantile_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_rIACI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
