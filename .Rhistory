variables=c("10m_u_component_of_wind", "10m_v_component_of_wind", "2m_temperature", "total_precipitation"),
dataset="reanalysis-era5-land",
area = c(-90, -180, 90, 180),
output_dir = "cds_data", # Default output directory
user_id, user_key) {
# Validate input parameters
if (start_year > end_year || start_month < 1 || start_month > 12 || end_month < 1 || end_month > 12) {
stop("Invalid year or month range.")
}
# Set the ECMWF API key
ecmwfr::wf_set_key(user = user_id, key = user_key)
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Define fixed time range for every hour of each day
times <- sprintf("%02d:00", 0:23)
# Loop through years and months
for (year in as.character(seq(start_year, end_year))) {
for (month in as.character(seq(start_month, end_month))) {
# Calculate days in the month
request <- list(
variable = variables,
year = year,
month = month,
day = as.character(seq(1, 31)),
time = times,
area = area,
format = "netcdf",
dataset_short_name = dataset,
target = paste0( year, "_", sprintf("%02s",month), ".nc")      )
ecmwfr::wf_request(user = user_id, request = request, path = output_dir, transfer = TRUE)
}
}
}
download_data(start_year=1960, end_year = 2023, area = c(44, -10, 36, 4),
user_id = user_id,
user_key = user_key
)
detach("package:ecmwfr", unload = TRUE)
user_id <- 'zhounan@ucm.es'
user_key <-  '16c2c202-d64c-462f-97ad-20b5b044260c'
download_data(start_year=1960, end_year = 1975, area = c(44, -10, 36, 4),
user_id = user_id,
user_key = user_key
)
filename <- list.files('/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI')
source_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI'
target_folder <- '/Users/nnnn/Phd/Actuaries climate index/ACI_land/seasonalACI'
new_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
file_names <- list.files(source_folder)
for (file in file_names) {
source_file_path <- file.path(source_folder, file)
target_file_path <- file.path(target_folder, file)
new_file_path <- file.path(new_folder, file)
if (file.exists(target_file_path)) {
file.copy(source_file_path, new_file_path)
}
}
Rmean <- function(x){
xmatrix <- matrix(x,nrow = 744 )
xmean <- apply(xmatrix, 1, mean)
}
csv_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
csv_files <- list.files(csv_folder, pattern = "\\.csv$", full.names = TRUE)
all_data <- data.frame()
for (csv_file in csv_files) {
current_data <- read.csv(csv_file)
all_data <- rbind(all_data, current_data)
}
T90std <- Rmean(all_data$T90std)
T10std <- Rmean(all_data$T10std)
Pstd <- Rmean(all_data$Pstd)
Dstd <- Rmean(all_data$Dstd)
Wstd <- Rmean(all_data$Wstd)
Sstd <- Rmean(all_data$Sstd)
ACI <- Rmean(all_data$ACI)
IACI <- round(cbind(T90std,T10std,Pstd,Dstd,Wstd,Sstd,ACI),3)
View(IACI)
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
file_names <- list.files(source_folder)
for (file in file_names) {
source_file_path <- file.path(source_folder, file)
target_file_path <- file.path(target_folder, file)
new_file_path <- file.path(new_folder, file)
if (file.exists(target_file_path)) {
file.copy(source_file_path, new_file_path)
}
}
source_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI'
target_folder <- '/Users/nnnn/Phd/Actuaries climate index/ACI_land/seasonalACI'
new_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
file_names <- list.files(source_folder)
for (file in file_names) {
source_file_path <- file.path(source_folder, file)
target_file_path <- file.path(target_folder, file)
new_file_path <- file.path(new_folder, file)
if (file.exists(target_file_path)) {
file.copy(source_file_path, new_file_path)
}
}
target_folder  <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI'
source_folder<- '/Users/nnnn/Phd/Actuaries climate index/ACI_land/seasonalACI'
new_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
file_names <- list.files(source_folder)
for (file in file_names) {
source_file_path <- file.path(source_folder, file)
target_file_path <- file.path(target_folder, file)
new_file_path <- file.path(new_folder, file)
if (file.exists(target_file_path)) {
file.copy(source_file_path, new_file_path)
}
}
target_folder  <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI'
source_folder<- '/Users/nnnn/Phd/Actuaries climate index/ACI_land/seasonalACI'
new_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
file_names <- list.files(source_folder)
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
source_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Monthly IACI'
target_folder <- '/Users/nnnn/Phd/Actuaries climate index/ACI_land/seasonalACI'
new_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
if (!dir.exists(new_folder)) {
dir.create(new_folder)
}
file_names <- list.files(source_folder)
for (file in file_names) {
source_file_path <- file.path(source_folder, file)
target_file_path <- file.path(target_folder, file)
new_file_path <- file.path(new_folder, file)
if (file.exists(target_file_path)) {
file.copy(target_file_path, new_file_path)
}
}
#--------
csv_folder <- '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal IACI'
csv_files <- list.files(csv_folder, pattern = "\\.csv$", full.names = TRUE)
all_data <- data.frame()
for (csv_file in csv_files) {
current_data <- read.csv(csv_file)
all_data <- rbind(all_data, current_data)
}
T90std <- Rmean(all_data$T90std)
T10std <- Rmean(all_data$T10std)
Pstd <- Rmean(all_data$Pstd)
Dstd <- Rmean(all_data$Dstd)
Wstd <- Rmean(all_data$Wstd)
Sstd <- Rmean(all_data$Sstd)
ACI <- Rmean(all_data$ACI)
IACI <- round(cbind(T90std,T10std,Pstd,Dstd,Wstd,Sstd,ACI),3)
csv_files <- list.files(csv_folder, pattern = "\\.csv$", full.names = TRUE)
all_data <- data.frame()
for (csv_file in csv_files) {
current_data <- read.csv(csv_file)
all_data <- rbind(all_data, current_data)
}
length(all_data$X)
744/12
744/12*4
Rmean <- function(x){
xmatrix <- matrix(x,nrow = 248 )
xmean <- apply(xmatrix, 1, mean)
}
T90std <- Rmean(all_data$T90std)
T10std <- Rmean(all_data$T10std)
Pstd <- Rmean(all_data$Pstd)
Dstd <- Rmean(all_data$Dstd)
Wstd <- Rmean(all_data$Wstd)
Sstd <- Rmean(all_data$Sstd)
ACI <- Rmean(all_data$ACI)
IACI <- round(cbind(T90std,T10std,Pstd,Dstd,Wstd,Sstd,ACI),3)
date <-seq(from = as.Date("1961-01-01"), to = as.Date("2022-12-31"), by = "quarter"))
date <-seq(from = as.Date("1961-01-01"), to = as.Date("2022-12-31"), by = "quarter")
quarters.Date(date)
quarters(date)
quarters <- format(date, "%Y Q")  # 先获取年份并添加季度符号
quarters <- paste0(quarters, (as.integer(format(date, "%m")) - 1) %/% 3 + 1)  # 计算季度并添加到字符串中
quarters
IACI <- xts(IACI,order.by = quarters)
IACI <- cbind.data.frame( quarters, IACI)
#-----
write.csv(IACI,file = '/Users/nnnn/Actuaries climate index/Province/Toledo/Monthly IACI.csv',row.names = FALSE)
#-----
write.csv(IACI,file = '/Users/nnnn/Actuaries climate index/Province/Toledo/Seasonal Toledo.csv',row.names = FALSE)
#-----
write.csv(IACI,file = '/Users/nnnn/Actuaries climate index/Province/Toledo/Seasonal_Toledo.csv',row.names = FALSE)
#-----
write.csv(IACI,file = '/Users/nnnn/Phd/Actuaries climate index/Province/Toledo/Seasonal_Toledo.csv',row.names = FALSE)
# Main function: climate_input
# This function integrates the above functionalities to create a climate input object containing data and related information
climate_input <- function(tmax = NULL, tmin = NULL, prec = NULL, wind = NULL, dates = NULL,
base.range = c(1961, 1990), n = 5, quantiles = NULL,
temp.qtiles = c(0.10, 0.90), wind.qtile = 0.90,
max.missing.days = c(annual = 15, monthly = 3),
min.base.data.fraction.present = 0.1) {
dates <- yms(dates)
# Check basic argument validity
check_basic_argument_validity(tmax, tmin, prec, wind, dates, base.range, n)
# Create complete date sequence
date_sequence <- create_date_sequence(dates)
# Fill data series
data_series_list <- list()
if (!is.null(tmax)) {
data_series_list$tmax <- fill_data_series(tmax, dates, date_sequence)
}
if (!is.null(tmin)) {
data_series_list$tmin <- fill_data_series(tmin, dates, date_sequence)
}
if (!is.null(prec)) {
data_series_list$prec <- fill_data_series(prec, dates, date_sequence)
}
if (!is.null(wind)) {
data_series_list$wind <- fill_data_series(wind, dates, date_sequence)
}
# Calculate quantiles
if (is.null(quantiles)) {
quantiles <- list()
if (!is.null(tmax)) {
quantiles$tmax <- calculate_quantiles(data_series_list$tmax, date_sequence, base.range, n, temp.qtiles, min.base.data.fraction.present)
}
if (!is.null(tmin)) {
quantiles$tmin <- calculate_quantiles(data_series_list$tmin, date_sequence, base.range, n, temp.qtiles, min.base.data.fraction.present)
}
if (!is.null(wind)) {
quantiles$wind <- calculate_wind_quantiles(data_series_list$wind, date_sequence, base.range, wind.qtile)
}
}
# Generate NA masks
na_masks <- generate_na_masks(data_series_list, date_sequence, max.missing.days)
years <- year(date_sequence)
months <- month(date_sequence)
date_factors <- list(
annual = factor(years),
monthly = factor(format(date_sequence, '%Y-%m'))
)
month_day <- format(date_sequence, '%m-%d')
# Create climate input object
climate_input <- list(
data = data_series_list,
quantiles = quantiles,
na_masks = na_masks,
dates = date_sequence,
month_day = month_day,
date_factors = date_factors,
base_range = base.range,
max_missing_days = max.missing.days
)
return(climate_input)
}
# Import the Python script containing the functions process_data and export_data_to_csv
source_python("data_processing.py")  # Ensure this path points to your Python script
View(IACI)
devtools::document()
install.packages("Rcpp")
devtools::document()
usethis::use_description()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
devtools::check()
reticulate::use_python("/usr/bin/python3", required = TRUE)
python_script <- system.file("python", "data_processing.py", package = "rIACI")
reticulate::source_python(python_script, envir = reticulate::py)
python_script <- system.file("python", "data_processing.py", package = "rIACI")
reticulate::source_python(python_script, envir = reticulate::py)
reticulate::py_module_available("xarray")
python_script <- system.file("python", "data_processing.py", package = "rIACI")
reticulate::source_python(python_script, envir = reticulate::py)
ls(reticulate::py)
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
use_build_ignore(".Rproj")
library(usethis)
use_build_ignore(".Rproj")
roxygen2::roxygenise()
devtools::document()
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
devtools::check()
install.packages("/Users/nnnn/Phd/rIACI", repos = NULL, type = "source", INSTALL_opts = "--no-byte-compile")
devtools::document()
install.packages("/Users/nnnn/Phd/rIACI", repos = NULL, type = "source", INSTALL_opts = "--no-byte-compile")
detach("package:rIACI", unload = TRUE)
library(rIACI)
detach("package:rIACI", unload = TRUE)
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
devtools::check()
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
devtools::check()
library(rIACI)
detach("package:rIACI", unload = TRUE)
install.packages("/Users/nnnn/Phd/rIACI", repos = NULL, type = "source", INSTALL_opts = "--no-byte-compile")
devtools::document()
devtools::clean_dll()
devtools::build()
devtools::install()
devtools::check()
document()
Sys.setenv("_R_CHECK_NO_TIMESTAMPS_" = "1")
devtools::check()
Sys.setenv(TZ = "CET")
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::use_testthat()
devtools::use_testthat()
devtools::check()
Sys.setenv(TZ = "CET")
devtools::document()
devtools::build()
devtools::check()
usethis::use_vignette("introduction")
library(rIACI)
options(rmarkdown.html_vignette.check_title = FALSE)
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
Sys.time()
Sys.timezone()
Sys.getlocale()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
remove.packages("rIACI")
devtools::check()
unlink("/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/rIACI", recursive = TRUE)
devtools::check()
devtools::clean_dll()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::check()
devtools::build()       # 构建包
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()
remove.packages("rIACI")
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
remove.packages("rIACI")
# 删除 src 目录中的编译文件
unlink(list.files(path = "src", pattern = "\\.(o|so|dll)$", full.names = TRUE), force = TRUE)
# 删除 R 目录中的 lazy-load 数据库文件
unlink(list.files(path = "R", pattern = "\\.(rdb|rdx|rds)$", full.names = TRUE), force = TRUE)
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
file.show('/private/var/folders/l2/d1g24m_91h55h7x6rvtgdssr0000gn/T/RtmpXxM3u4/file3439603c2e23/rIACI.Rcheck/00check.log')
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
library(rIACI)
devtools::check()
q()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
file.edit('/private/var/folders/l2/d1g24m_91h55h7x6rvtgdssr0000gn/T/Rtmp67bEtg/file11663ba396ea/rIACI.Rcheck/00check.log')
file('/private/var/folders/l2/d1g24m_91h55h7x6rvtgdssr0000gn/T/Rtmp67bEtg/file11663ba396ea/rIACI.Rcheck/00check.log')
file.show('/private/var/folders/l2/d1g24m_91h55h7x6rvtgdssr0000gn/T/Rtmp67bEtg/file11663ba396ea/rIACI.Rcheck/00check.log')
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
devtools::clean_dll()   # 清理之前的编译残留
devtools::document()    # 重新生成文档和 NAMESPACE
devtools::build()       # 构建包
devtools::install()     # 安装包
devtools::check()
